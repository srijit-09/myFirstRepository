<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite hostname="BANLW70E805EF2" name="DemoTest.NewTest" tests="31" failures="1" timestamp="23 Aug 2017 08:50:56 GMT" time="74.392" errors="0">
  <testcase name="getAddress" time="1.928" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="2.044" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="2.000" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="2.002" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="1.910" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="1.950" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="3.556" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="2.455" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="6.927" classname="DemoTest.NewTest">
    <failure type="io.restassured.path.json.exception.JsonPathException" message="Failed to parse the JSON document">
      <![CDATA[io.restassured.path.json.exception.JsonPathException: Failed to parse the JSON document
	at io.restassured.path.json.JsonPath$ExceptionCatcher.invoke(JsonPath.java:930)
	at io.restassured.path.json.JsonPath$4.doParseWith(JsonPath.java:895)
	at io.restassured.path.json.JsonPath$JsonParser.parseWith(JsonPath.java:975)
	at io.restassured.path.json.JsonPath.get(JsonPath.java:201)
	at DemoTest.NewTest.getAddress(NewTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
Caused by: java.lang.IllegalArgumentException: The JSON input text should neither be null nor empty.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
	at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:105)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:60)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:235)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)
	at io.restassured.internal.path.json.ConfigurableJsonSlurper.parseText(ConfigurableJsonSlurper.groovy:80)
	at io.restassured.path.json.JsonPath$4$1.method(JsonPath.java:893)
	at io.restassured.path.json.JsonPath$ExceptionCatcher.invoke(JsonPath.java:928)
	... 28 more
]]>
    </failure>
  </testcase> <!-- getAddress -->
  <testcase name="getAddress" time="1.960" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="1.969" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="2.286" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="1.939" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="2.001" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="2.079" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="1.916" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="4.006" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="2.005" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="1.978" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="2.069" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="1.951" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="1.964" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="2.004" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="2.106" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="2.086" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="2.583" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="1.913" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="1.891" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="1.990" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="1.955" classname="DemoTest.NewTest"/>
  <testcase name="getAddress" time="4.969" classname="DemoTest.NewTest"/>
</testsuite> <!-- DemoTest.NewTest -->
